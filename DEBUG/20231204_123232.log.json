{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090 Ti\nCUDA_HOME: None\nGCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 1.11.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0\nOpenCV: 4.8.1\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.25.3+a924f97", "config": "dataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nclasses = ('car', )\neval_peroid = 1000\nsaving_peroid = 2000\nepochs = 50\nbatch_size = 2\nnumbers_of_images = 12975\ntotal_iters = 324400\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=[\n        dict(\n            type='CocoDataset',\n            ann_file='data/coco/sim10k_train.json',\n            img_prefix='data/coco/JPEGImages/',\n            classes=('car', ),\n            filter_empty_gt=False,\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations', with_bbox=True),\n                dict(\n                    type='Resize',\n                    img_scale=(1024, 1024),\n                    ratio_range=(0.1, 2.0),\n                    multiscale_mode='range',\n                    keep_ratio=True),\n                dict(\n                    type='RandomCrop',\n                    crop_type='absolute_range',\n                    crop_size=(1024, 1024),\n                    recompute_bbox=True,\n                    allow_negative_crop=True),\n                dict(type='FilterAnnotations', min_gt_bbox_wh=(0.01, 0.01)),\n                dict(type='RandomFlip', flip_ratio=0.5),\n                dict(\n                    type='Pad',\n                    size=(1024, 1024),\n                    pad_val=dict(img=(114, 114, 114))),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n            ]),\n        dict(\n            type='CocoDataset',\n            ann_file=\n            'data/coco_semi_annos/instances_train2017.1@0-unlabeled.json',\n            img_prefix='data/coco/train2017/',\n            classes=('car', ),\n            filter_empty_gt=False,\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations', with_bbox=True),\n                dict(\n                    type='Resize',\n                    img_scale=(1024, 1024),\n                    ratio_range=(0.1, 2.0),\n                    multiscale_mode='range',\n                    keep_ratio=True),\n                dict(\n                    type='RandomCrop',\n                    crop_type='absolute_range',\n                    crop_size=(1024, 1024),\n                    recompute_bbox=True,\n                    allow_negative_crop=True),\n                dict(type='FilterAnnotations', min_gt_bbox_wh=(0.01, 0.01)),\n                dict(type='RandomFlip', flip_ratio=0.5),\n                dict(\n                    type='Pad',\n                    size=(1024, 1024),\n                    pad_val=dict(img=(114, 114, 114))),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n            ])\n    ],\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        classes=('car', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Pad',\n                        size=(1024, 1024),\n                        pad_val=dict(img=(114, 114, 114))),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        classes=('car', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Pad',\n                        size=(1024, 1024),\n                        pad_val=dict(img=(114, 114, 114))),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1000, metric='bbox', classwise=True)\ncheckpoint_config = dict(interval=2000, by_epoch=False)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained/co_dino_5scale_9encoder_lsj_r50_3x_coco.pth'\nresume_from = 'outputs/custom_sim2city_unsupervised_dcls_only/latest.pth'\nworkflow = [('train', 1000)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nnum_dec_layer = 6\nlambda_2 = 2.0\nmodel = dict(\n    type='CoDETR',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='ChannelMapper',\n        in_channels=[256, 512, 1024, 2048],\n        kernel_size=1,\n        out_channels=256,\n        act_cfg=None,\n        norm_cfg=dict(type='GN', num_groups=32),\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            octave_base_scale=4,\n            scales_per_octave=3,\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64, 128]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=12.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=12.0)),\n    query_head=dict(\n        type='CoDINOHead',\n        num_query=900,\n        num_classes=1,\n        num_feature_levels=5,\n        in_channels=2048,\n        sync_cls_avg_factor=True,\n        as_two_stage=True,\n        with_box_refine=True,\n        mixed_selection=True,\n        dn_cfg=dict(\n            type='CdnQueryGenerator',\n            noise_scale=dict(label=0.5, box=1.0),\n            group_cfg=dict(dynamic=True, num_groups=None, num_dn_queries=100)),\n        transformer=dict(\n            type='CoDinoTransformer',\n            with_pos_coord=True,\n            with_coord_feat=False,\n            num_co_heads=2,\n            num_feature_levels=5,\n            encoder=dict(\n                type='DetrTransformerEncoder',\n                num_layers=9,\n                with_cp=9,\n                transformerlayers=dict(\n                    type='BaseTransformerLayer',\n                    attn_cfgs=dict(\n                        type='MultiScaleDeformableAttention',\n                        embed_dims=256,\n                        num_levels=5,\n                        dropout=0.0),\n                    feedforward_channels=2048,\n                    ffn_dropout=0.0,\n                    operation_order=('self_attn', 'norm', 'ffn', 'norm'))),\n            decoder=dict(\n                type='DinoTransformerDecoder',\n                num_layers=6,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.0),\n                        dict(\n                            type='MultiScaleDeformableAttention',\n                            embed_dims=256,\n                            num_levels=5,\n                            dropout=0.0)\n                    ],\n                    feedforward_channels=2048,\n                    ffn_dropout=0.0,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm')))),\n        positional_encoding=dict(\n            type='SinePositionalEncoding',\n            num_feats=128,\n            temperature=20,\n            normalize=True),\n        loss_cls=dict(\n            type='QualityFocalLoss',\n            use_sigmoid=True,\n            beta=2.0,\n            loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=5.0),\n        loss_iou=dict(type='GIoULoss', loss_weight=2.0)),\n    roi_head=[\n        dict(\n            type='CoStandardRoIHead',\n            bbox_roi_extractor=dict(\n                type='SingleRoIExtractor',\n                roi_layer=dict(\n                    type='RoIAlign', output_size=7, sampling_ratio=0),\n                out_channels=256,\n                featmap_strides=[4, 8, 16, 32, 64],\n                finest_scale=56),\n            bbox_head=dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=1,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=False,\n                reg_decoded_bbox=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=12.0),\n                loss_bbox=dict(type='GIoULoss', loss_weight=120.0)))\n    ],\n    bbox_head=[\n        dict(\n            type='CoATSSHead',\n            num_classes=1,\n            in_channels=256,\n            stacked_convs=1,\n            feat_channels=256,\n            anchor_generator=dict(\n                type='AnchorGenerator',\n                ratios=[1.0],\n                octave_base_scale=8,\n                scales_per_octave=1,\n                strides=[4, 8, 16, 32, 64, 128]),\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            loss_cls=dict(\n                type='FocalLoss',\n                use_sigmoid=True,\n                gamma=2.0,\n                alpha=0.25,\n                loss_weight=12.0),\n            loss_bbox=dict(type='GIoULoss', loss_weight=24.0),\n            loss_centerness=dict(\n                type='CrossEntropyLoss', use_sigmoid=True, loss_weight=12.0))\n    ],\n    da_head=dict(\n        type='DAHead', loss=dict(type='CrossEntropyLoss', use_sigmoid=True)),\n    train_cfg=[\n        dict(\n            assigner=dict(\n                type='HungarianAssigner',\n                cls_cost=dict(type='FocalLossCost', weight=2.0),\n                reg_cost=dict(\n                    type='BBoxL1Cost', weight=5.0, box_format='xywh'),\n                iou_cost=dict(type='IoUCost', iou_mode='giou', weight=2.0))),\n        dict(\n            rpn=dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.3,\n                    min_pos_iou=0.3,\n                    match_low_quality=True,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=256,\n                    pos_fraction=0.5,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=False),\n                allowed_border=-1,\n                pos_weight=-1,\n                debug=False),\n            rpn_proposal=dict(\n                nms_pre=4000,\n                max_per_img=1000,\n                nms=dict(type='nms', iou_threshold=0.7),\n                min_bbox_size=0),\n            rcnn=dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)),\n        dict(\n            assigner=dict(type='ATSSAssigner', topk=9),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False)\n    ],\n    test_cfg=[\n        dict(max_per_img=300, nms=dict(type='soft_nms', iou_threshold=0.8)),\n        dict(\n            rpn=dict(\n                nms_pre=1000,\n                max_per_img=1000,\n                nms=dict(type='nms', iou_threshold=0.7),\n                min_bbox_size=0),\n            rcnn=dict(\n                score_thr=0.0,\n                nms=dict(type='nms', iou_threshold=0.5),\n                max_per_img=100)),\n        dict(\n            nms_pre=1000,\n            min_bbox_size=0,\n            score_thr=0.0,\n            nms=dict(type='nms', iou_threshold=0.6),\n            max_per_img=100)\n    ],\n    with_attn_mask=False)\noptimizer = dict(\n    type='AdamW',\n    lr=0.002,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(custom_keys=dict(backbone=dict(lr_mult=0.1))))\noptimizer_config = dict(grad_clip=dict(max_norm=0.1, norm_type=2))\nlr_config = dict(policy='step', step=[30])\nrunner = dict(type='IterBasedRunner', max_iters=324400)\nimage_size = (1024, 1024)\nwork_dir = 'DEBUG'\nauto_resume = False\ngpu_ids = [0]\nadapter = False\n", "seed": 1720830548, "exp_name": "custom_sim2city_unsupervised_woA.py"}
